## 全局(框架，基库)部分的配置示例

# 配置中心服务地址
app.configServerUrl=http://nconf.internal.netinnet.com
# 应用的唯一身份标识
app.AK=netinnet_qdk_start-dev
# 应用访问API服务时的密钥
app.SK=

# 应用是否处于debug模式，debug模式下action文件的修改及actionclass的修改会实时生效，但性能较差，正式环境请设置为false或注释掉此配置。默认为：false。
app.isDebug=true
# 缓存方式,默认 encache
app.cache.impl=memcache
app.cache.hosts=172.16.33.163\:11211,172.16.33.165\:11211
app.cache.user=test001
app.cache.password=010203

# 应用使用的编码，默认为:UTF-8。
app.encoding=UTF-8

# session时效，单位：分钟。默认45。
app.sessionTimeout=45

# 配置文件检查间隔，单位：分钟。默认0。如果设置为0则配置文件发生变化时不会重新读取解析。
# 如果不为0则达到指定间隔时间时将触发检测文件变化动作，如果文件发生变化则重新读取解析。
app.checkInterval=0

# 支持的语言集合,采用简写的方式,中间用逗号隔开
app.languageResource=CN,EN,TW


# 本地开发中方便调试使用的测试服务地址,只有isDebug为true时有效.线上无效.如果不配置,则按照对应服务的相应规范文档中的策略执行.
app.test_cdn_common_url=cdn/common/
app.test_cdn_static_url=
app.test_cdn_i18n_url=



##单点登录主域名
# app.ssoDomain=.netinnet.com
app.ssoDomain=127.0.0.1

## 数据源(datasource)的配置示例
## 数据源配置中的几个关键字：
## app.defaultDatasource.* 共享配置属性，作为默认数据源，此部分的配置可用于改变默认值或共享配置，其它数据源可以只配置与此默认数据源有差异部分的属性。
## app.dsList 可用的数据源名称列表，多数据源时使用，不包含默认数据源，以逗号分隔。如app.dsList=ds1,ds2表示有2个可用的数据源，名称分别为ds1和ds2。
## ds.[dsList.item].* 配置指定名称下的数据源的相关属性值，如果没有设置取公共配置值，如果公共配置中没有取默认值。

# 配置示例--应用中可使用的其它数据源名称列表，多数据源时使用，不包含默认数据源。
app.dsList=dsQDKDemo


## 配置示例--默认数据源配置部分, 应用中执行sql时没有指定使用的数据源的情况下默认使用的数据源。
# 数据源别名，此属性是唯一一个不会被共享的属性，其它数据源直接以节点名为数据源别名。
# 配置示例--应用中可使用的其它数据源名称列表，多数据源时使用，不包含默认数据源。

# 驱动名称
ds.dsQDKDemo.driverClassName=com.mysql.jdbc.Driver
# 数据库连接地址。如： jdbc:mysql://127.0.0.1:3306/test1
ds.dsQDKDemo.url=jdbc\:mysql\://127.0.0.1\:3306/qdkdemo?useUnicode\=true&characterEncoding\=utf-8&useOldAliasMetadataBehavior\=true
# 数据库连接用户。
ds.dsQDKDemo.username=root
# 数据库连接密码。
ds.dsQDKDemo.password=123456
# 数据源类型。默认jdbc。
ds.dsQDKDemo.type=javax.sql.DataSource
# 初始化连接数。默认2
ds.dsQDKDemo.initialPoolSize=10
# 最小连接数。默认2
ds.dsQDKDemo.minPoolSize=3
# 最大连接数。默认60
ds.dsQDKDemo.maxPoolSize=80
# 当连接不够时，每次增加多少个连接。默认2
ds.dsQDKDemo.acquireIncrement=1
# 连接的最大空闲时间(单位：毫秒)，超过最大空闲时间的连接将被关闭。单位：毫秒。默认:300000
ds.dsQDKDemo.maxIdleTime=300000
# 连接的最小空闲时间(单位：毫秒)，最小空闲时间的连接不会销毁也不会进行检测。单位：毫秒。默认:60000
ds.dsQDKDemo.minIdleTime=60000
# 获取连接时是否测试有效性。默认true
ds.dsQDKDemo.testOnBorrow=true
# 归还连接时是否测试有效性。默认true
ds.dsQDKDemo.testOnReturn=true
# 测试有效性使用的SQL查询命令。默认：select 1
ds.dsQDKDemo.validationQuery=select 1



## 过滤器部分的配置示例
## 过滤器配置中的几个关键字：
## app.filterList 可用的过滤器名称列表，以逗号分隔。
## filter.[filterList.item].* 配置指定名称下的过滤器的相关属性值。
## 过滤器基本属性如下：
## filter.[filterList.item].class  指定过滤器的实现类完全限定类名，需要实现IActionFilter接口。
## filter.[filterList.item].url	指定过滤器拦截的url，如果没有指定拦截的url，则拦截器会被初始化但是无法处理请求。
## 过滤器支持的自定义扩展属性设置需参考过滤器实现的相关使用手册文档。

# 过滤器名称列表，名称唯一，不可重复，对相同url进行拦截的过滤器执行顺序以列表中的排列顺序为准。
app.filterList=requestFilter,authFilter,ActionFilter,ServiceFilter,ViewFilter

filter.requestFilter.class=cn.netinnet.qdk.action.RequestFilter
filter.requestFilter.url=/*
filter.requestFilter.encoding=GBK
filter.requestFilter.cachefile=css|js|swf|gif|jpg|jpeg|png|bmp
filter.requestFilter.cachecontrol=max-age:604800, public
filter.requestFilter.encoding.teste.test=2324324


filter.ActionFilter.class=cn.netinnet.qdk.action.ActionFilter
filter.ActionFilter.url=/do
filter.ActionFilter.ProductMode=debug
filter.ActionFilter.JSSRC=javascript/basic.js

filter.ServiceFilter.class=cn.netinnet.qdk.action.ServiceFilter
filter.ServiceFilter.url=/doService

filter.ViewFilter.class=cn.netinnet.qdk.action.ViewFilter
filter.ViewFilter.url=/doView

# authFilter过滤器实现类完全限定类名。
filter.authFilter.class=com.netinnet.qdk.filter.AuthFilter
# 不需要登录校验的action：
# authFilter的自定义扩展属性--需要忽略登录校验的action及action文件中的节点。规则如下：
#	1.action不用带上".action"的后缀名
#	2.如果只指定action名称，则认为action中的所有节点都不需要校验
#	3.如果要分别指定action下的某些节点,则使用"action名称:start名称,start名称,..."的形式，暂不支持正则表达式
#	4.参考示例：ignore_actions=login;ignore_session_config:index,show;a/b/c
filter.authFilter.ignore_actions=user/user:regist,login,logout;public;invokeService
# authFilter过滤器拦截的url
filter.authFilter.url=/do;/doView
# 自定义扩展属性--已登陆用户的唯一标识值存放名称，在后续的业务处理中可以直接使用request.[key_user_id]获取。
#filter.authFilter.key_user_id=LOGIN_USERID
# 自定义扩展属性--已登陆用户的名称值存放名称，使用方法同上。
#filter.authFilter.key_user_name=LOGIN_USERNAME
# 自定义扩展属性--已登陆用户的角色唯一标示值列表存放名称，多个角色标识用逗号分割。
#filter.authFilter.kye_role_ids=LOGIN_ROLEIDS
# 自定义扩展属性--已登陆用户的角色名称值列表存放名称，多个角色名称用逗号分割，与上边的角色唯一标识一一对应。
#filter.authFilter.key_role_names=LOGIN_ROLENAMES
# 自定义扩展属性--已登陆用户的IP
filter.authFilter.auth_fail=dojsp?jsp=sso_auth_fail.jsp

## dojsp过滤器相关配置
filter.dojsp.class=com.netinnet.qdk.action.dojsp
filter.dojsp.url=/dojsp

# downloadFile过滤器相关配置
filter.downloadFile.class=com.netinnet.qdk.action.execute.CommonDownloadFile
filter.downloadFile.url=/commondownloadfile

# uploadFile过滤器相关配置
filter.uploadFile.class=cn.netinnet.qdk.action.doUploadDataFile
filter.uploadFile.url=/douploadfile
filter.uploadFile.dir=data

# uploadExcel过滤器相关配置
filter.uploadExcel.class=cn.netinnet.qdk.action.doUploadExcel
filter.uploadExcel.url=/douploadexcel

## 服务依赖部分的相关配置示例
## 每个项目可以提供一些供其它项目调用的服务，需要在WEB-INF目录下建立一个service目录来存放。
## 如果没有多版本的需求，则直接像写其它的action文件一样，在service目录下建立对应的目录及action文件。
## 如果有多版本的需求，则需要在根目录下建立版本目录，然后在版本目录下编写action文件。
## 其它项目组在调用服务时使用如下的形式调用:
## temp.a=doService?name=xnsx&action=user&start=getInfo&version=1.0.0&par1=par1value
## name,action,start为必须项，其它为可选项。　
##　
##　
## 服务依赖配置中的几个关键字：
## app.serviceList 依赖的服务名称列表，以逗号分隔。
## service.[serviceList.item].* 配置指定服务的相关属性值。
## 服务基本属性如下：
## service.[serviceList.item].ak		项目的唯一标识AK值，必选项。
## service.[serviceList.item].url		项目直连地址，只在测试中可用，正式环境不生效，默认为空，线上自动获取。
## service.[serviceList.item].version	调用服务时默认使用的服务版本，默认为空。

# 依赖的项目服务名称列表，名称唯一，不可重复。 
app.serviceList=self

# 依赖服务的相关信息配置
service.self.ak=netinnet_qdk_start-dev
service.self.url=http\://127.0.0.1/netinnet_qdk_start
service.self.version=1.0.0


## 插件(qdk扩展，开发者扩展)部分的配置示例。配置方式与过滤器一致。
## 插件与过滤器不一样的地方在于，插件不能拦截url，插件会在框架启动时被启动，框架停止时被停止。
app.pluginList=?


##自定义的配置信息
self.config.projectName=netinnet_qdk_start
self.config.url.localUrl=http\://127.0.0.1/netinnet_qdk_start/